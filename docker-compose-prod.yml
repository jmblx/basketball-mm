version: "3.7"
services:
  db:
    image: postgres:15
    container_name: db_app
    command: -p 5432
    expose:
      - 5432
    restart: always
    env_file:
      - backend/.env-non-dev
    networks:
      - custom
    volumes:
      - db-data:/var/lib/postgresql/data
  redis:
    image: redis:7
    container_name: redis_app
    command: --port 6379
    ports:
      - "6379:6379"
    expose:
      - 6379
    networks:
      - custom
  fastapi_app:
    env_file:
      - backend/.env-non-dev
    build:
      context: backend
    command: [ "/fastapi_app/docker/app.sh" ]
    ports:
      - "8000:8000"
    expose:
      - 8000
    networks:
      - custom
    depends_on:
      - db
      - redis
  web:
    container_name: "web"
    image: nginx:alpine
    depends_on:
      - fastapi_app
    ports:
      - "80:80"
    volumes:
      - ./app/conf.d:/etc/nginx/conf.d
      - ./frontend/static:/usr/share/nginx/html/static
    networks:
      - custom

  prometheus:
    depends_on:
      - fastapi_app
    image: prom/prometheus:v2.43.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    ports:
      - "9090:9090"
    networks:
      - custom
  grafana:
    image: grafana/grafana:8.5.22
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - grafana-config:/etc/grafana
    depends_on:
      - prometheus
    restart: always
    networks:
      - custom
    user: "0"

  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - custom
  kafka:
    image: 'bitnami/kafka:latest'
    ports:
      - "9093:9093"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    networks:
      - custom

  bot:
    restart: on-failure
    build:
      context: match-bot
      dockerfile: Dockerfile
    container_name: "notify"
    env_file:
      - ./match-bot/.env-non-dev
    networks:
      - custom
    command: python src/app.py
    depends_on:
      - kafka

networks:
  custom:
    driver: bridge
volumes:
  db-data:
  grafana-data:
  grafana-config:
  prometheus-data:
