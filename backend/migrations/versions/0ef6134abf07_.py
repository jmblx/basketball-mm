"""empty message

Revision ID: 0ef6134abf07
Revises: 
Create Date: 2023-12-18 16:08:21.682501

"""
from typing import Sequence, Union

from alembic import op
import fastapi_users_db_sqlalchemy
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0ef6134abf07'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('role',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('permissions', sa.JSON(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('number', sa.Integer(), nullable=True),
    sa.Column('pathfile', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tournament',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status', sa.Enum('opened', 'pending', 'actived', 'finished', name='statusevent'), nullable=False),
    sa.Column('placemark', sa.String(), nullable=False),
    sa.Column('number_participants', sa.Integer(), nullable=False),
    sa.Column('number_stages', sa.Integer(), nullable=False),
    sa.Column('winner_id', sa.Integer(), nullable=True),
    sa.Column('start_date', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=True),
    sa.Column('end_date', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=True),
    sa.Column('pathfile', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['winner_id'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('nickname', sa.String(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('is_email_confirmed', sa.Boolean(), nullable=False),
    sa.Column('email_confirmation_token', sa.String(length=50), nullable=True),
    sa.Column('registered_at', sa.DateTime(), server_default=sa.text("TIMEZONE('utc', now())"), nullable=True),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('pathfile', sa.String(), nullable=True),
    sa.Column('searching', sa.Boolean(), nullable=False),
    sa.Column('solo_raiting', sa.Integer(), nullable=False),
    sa.Column('id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('match',
    sa.Column('stage', sa.Integer(), nullable=True),
    sa.Column('number_in_stage', sa.Integer(), nullable=True),
    sa.Column('winner_id', sa.Integer(), nullable=True),
    sa.Column('tournament_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status', sa.Enum('opened', 'pending', 'actived', 'finished', name='statusevent'), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['tournament_id'], ['tournament.id'], ),
    sa.ForeignKeyConstraint(['winner_id'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('solomatch',
    sa.Column('winner_id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('status', sa.Enum('opened', 'pending', 'actived', 'finished', name='statusevent'), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['winner_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('team_tournament',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('team_fk', sa.Integer(), nullable=False),
    sa.Column('tournament_fk', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['team_fk'], ['team.id'], ),
    sa.ForeignKeyConstraint(['tournament_fk'], ['tournament.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_team',
    sa.Column('user_id', fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['team_id'], ['team.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'team_id')
    )
    op.create_table('team_match',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('team_fk', sa.Integer(), nullable=True),
    sa.Column('match_fk', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['match_fk'], ['match.id'], ),
    sa.ForeignKeyConstraint(['team_fk'], ['team.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('team_match')
    op.drop_table('user_team')
    op.drop_table('team_tournament')
    op.drop_table('solomatch')
    op.drop_table('match')
    op.drop_table('user')
    op.drop_table('tournament')
    op.drop_table('team')
    op.drop_table('role')
    # ### end Alembic commands ###
