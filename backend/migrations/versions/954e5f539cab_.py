"""empty message

Revision ID: 954e5f539cab
Revises: 
Create Date: 2024-01-16 12:51:37.736943

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import fastapi_users_db_sqlalchemy

# revision identifiers, used by Alembic.
revision: str = "954e5f539cab"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "role",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("permissions", sa.JSON(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user",
        sa.Column("nickname", sa.String(), nullable=False),
        sa.Column("role_id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=False),
        sa.Column("is_email_confirmed", sa.Boolean(), nullable=False),
        sa.Column(
            "email_confirmation_token", sa.String(length=50), nullable=True
        ),
        sa.Column(
            "registered_at",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=True,
        ),
        sa.Column("hashed_password", sa.String(length=1024), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.Column("pathfile", sa.String(), nullable=True),
        sa.Column("searching", sa.Boolean(), nullable=False),
        sa.Column("solo_rating", sa.Integer(), nullable=False),
        sa.Column("solomatch_wins", sa.Integer(), nullable=True),
        sa.Column("solomatch_loses", sa.Integer(), nullable=True),
        sa.Column("solomatch_winrate", sa.Float(), nullable=True),
        sa.Column("solomatch_played", sa.Integer(), nullable=True),
        sa.Column("search_vector", postgresql.TSVECTOR(), nullable=True),
        sa.Column(
            "id", fastapi_users_db_sqlalchemy.generics.GUID(), nullable=False
        ),
        sa.Column("rating_5x5", sa.Integer(), nullable=True),
        sa.Column("match5x5_wins", sa.Integer(), nullable=True),
        sa.Column("match5x5_loses", sa.Integer(), nullable=True),
        sa.Column("match5x5_winrate", sa.Float(), nullable=True),
        sa.Column("match5x5_played", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["role_id"],
            ["role.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "solomatch",
        sa.Column("scores", sa.JSON(), nullable=True),
        sa.Column(
            "winner_id",
            fastapi_users_db_sqlalchemy.generics.GUID(),
            nullable=True,
        ),
        sa.Column(
            "loser_id",
            fastapi_users_db_sqlalchemy.generics.GUID(),
            nullable=True,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "opened",
                "pending",
                "actived",
                "finished",
                "cancelled",
                name="statusevent",
            ),
            nullable=True,
        ),
        sa.Column("start_date", sa.DateTime(), nullable=True),
        sa.Column("end_date", sa.DateTime(), nullable=True),
        sa.ForeignKeyConstraint(
            ["loser_id"],
            ["user.id"],
        ),
        sa.ForeignKeyConstraint(
            ["winner_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "team",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("number", sa.Integer(), nullable=False),
        sa.Column(
            "captain_id",
            fastapi_users_db_sqlalchemy.generics.GUID(),
            nullable=False,
        ),
        sa.Column("is_captain_only_search", sa.Boolean(), nullable=False),
        sa.Column("pathfile", sa.String(), nullable=False),
        sa.Column("rating_5x5", sa.Integer(), nullable=True),
        sa.Column("match5x5_wins", sa.Integer(), nullable=True),
        sa.Column("match5x5_loses", sa.Integer(), nullable=True),
        sa.Column("match5x5_winrate", sa.Float(), nullable=True),
        sa.Column("match5x5_played", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["captain_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "match_5x5",
        sa.Column("scores", sa.JSON(), nullable=True),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "opened",
                "pending",
                "actived",
                "finished",
                "cancelled",
                name="statusevent",
            ),
            nullable=True,
        ),
        sa.Column("start_date", sa.DateTime(), nullable=True),
        sa.Column("end_date", sa.DateTime(), nullable=True),
        sa.Column("winner_id", sa.Integer(), nullable=True),
        sa.Column("loser_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["loser_id"],
            ["team.id"],
        ),
        sa.ForeignKeyConstraint(
            ["winner_id"],
            ["team.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "tournament",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "opened",
                "pending",
                "actived",
                "finished",
                "cancelled",
                name="statusevent",
            ),
            nullable=False,
        ),
        sa.Column("placemark", sa.String(), nullable=False),
        sa.Column("number_participants", sa.Integer(), nullable=False),
        sa.Column("number_stages", sa.Integer(), nullable=False),
        sa.Column("winner_id", sa.Integer(), nullable=True),
        sa.Column(
            "start_date",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=True,
        ),
        sa.Column(
            "end_date",
            sa.DateTime(),
            server_default=sa.text("TIMEZONE('utc', now())"),
            nullable=True,
        ),
        sa.Column("pathfile", sa.String(), nullable=False),
        sa.ForeignKeyConstraint(
            ["winner_id"],
            ["team.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_solomatch",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "user_fk",
            fastapi_users_db_sqlalchemy.generics.GUID(),
            nullable=True,
        ),
        sa.Column("solomatch_fk", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["solomatch_fk"],
            ["solomatch.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_fk"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "user_team",
        sa.Column(
            "user_id",
            fastapi_users_db_sqlalchemy.generics.GUID(),
            nullable=False,
        ),
        sa.Column("team_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["team_id"],
            ["team.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.id"],
        ),
        sa.PrimaryKeyConstraint("user_id", "team_id"),
    )
    op.create_table(
        "match",
        sa.Column("stage", sa.Integer(), nullable=True),
        sa.Column("number_in_stage", sa.Integer(), nullable=True),
        sa.Column("tournament_id", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "opened",
                "pending",
                "actived",
                "finished",
                "cancelled",
                name="statusevent",
            ),
            nullable=True,
        ),
        sa.Column("start_date", sa.DateTime(), nullable=True),
        sa.Column("end_date", sa.DateTime(), nullable=True),
        sa.Column("winner_id", sa.Integer(), nullable=True),
        sa.Column("loser_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["loser_id"],
            ["team.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tournament_id"],
            ["tournament.id"],
        ),
        sa.ForeignKeyConstraint(
            ["winner_id"],
            ["team.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "team_match_5x5",
        sa.Column("match_fk", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("team_fk", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["match_fk"],
            ["match_5x5.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_fk"],
            ["team.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "team_tournament",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("team_fk", sa.Integer(), nullable=False),
        sa.Column("tournament_fk", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["team_fk"],
            ["team.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tournament_fk"],
            ["tournament.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "team_match",
        sa.Column("match_fk", sa.Integer(), nullable=False),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("team_fk", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["match_fk"],
            ["match.id"],
        ),
        sa.ForeignKeyConstraint(
            ["team_fk"],
            ["team.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm;")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("team_match")
    op.drop_table("team_tournament")
    op.drop_table("team_match_5x5")
    op.drop_table("match")
    op.drop_table("user_team")
    op.drop_table("user_solomatch")
    op.drop_table("tournament")
    op.drop_table("match_5x5")
    op.drop_table("team")
    op.drop_table("solomatch")
    op.drop_table("user")
    op.drop_table("role")
    op.execute("DROP EXTENSION IF EXISTS pg_trgm;")
    # ### end Alembic commands ###
